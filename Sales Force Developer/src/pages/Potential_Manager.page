<apex:page controller="potential_Manager" showHeader="false" sidebar="false">

<style type="text/css">        /* Color for the title bar */
        .bPageBlock .pbHeader
        {
            background-color:#FFF !important;
        }
        .bPageBlock
        {            /* Color for the pageblock background */
            background-color:#FFF !important;
        }                                  
 </style>

	<apex:form>

		<apex:actionRegion >
			<apex:pageBlock title="Account">
				<apex:pageblocksection columns="1">
				<!--<apex:inputfield value="{!placeholderPotential.accountid}"/>-->
					<apex:pageblocksectionitem >
							<apex:outputlabel value=""/>
							<apex:commandButton value="Manage Contacts"
							action="{!selectPotential}"
							rerender="PotentialContactsArea"/>
					</apex:pageblocksectionitem>
				</apex:pageblocksection>
			</apex:pageBlock>
		</apex:actionRegion>

		<apex:outputpanel id="PotentialContactsArea">
			<!-- <apex:pageblock title="Account Potential">
				<apex:pageBlockTable value="{!accountPotentials}" var="c">
					<apex:column headerValue="Product">
						<apex:outputfield value="{!c.product__c}"/>
					</apex:column>
					<apex:column headerValue="Potential">
						<apex:outputfield value="{!c.probability__c}"/>
					</apex:column>
					<apex:column headerValue="Probability">
						<apex:outputfield value="{!c.potential__c}"/>
					</apex:column>
				</apex:pageBlockTable>
			</apex:pageblock> -->

		<apex:pageblock title="List Potential">

		<style>
		  .active {
		    stroke: #000;
		    stroke-width: 2px;
		  }
		  body {
		    font: 10px sans-serif;
		  }

		  .axis path,
		  .axis line {
		    fill: none;
		    stroke: #dcdcdc;
		    shape-rendering: crispEdges;
		  }
		/* .line {
		  fill: none;
		  stroke: steelblue;
		  stroke-width: 1.5px;
		} */

		</style>

		<h2> Potential and Probability</h2>
		<div id="my-d3"/>

		<script src="https://d3js.org/d3.v4.min.js"></script>
		  <script>
		  	var fontsize=17;
		  	var mylist = []; 
		  	var circles = [{x: 0, y: 0},
		  	{x: 0, y: 0},
		  	{x: 0, y: 0},
		  	{x: 0, y: 0},
		  	{x: 0, y: 0},
		  	{x: 0, y: 0},
		  	{x: 0, y: 0},
		  	{x: 0, y: 0},
		  	{x: 0, y: 0},
		  	{x: 0, y: 0}];
		  	var producttext = [];

			potential_Manager.selectPot('', function(Potential__c, event) {
		    if (event.status) {
		        console.log(Potential__c[0]);
		        mylist = event.result;
		        console.log(event);
		    	//circle[0].x = mylist[0].Probability__c ;
		    	//circle[0].y = mylist[0].Potential__c;
		    	//console.log(circle);
		    	 for (i = 0; i < 10; i++) {
		         	circles[i].xx = mylist[i].Probability__c ;
		         	circles[i].yy = mylist[i].Potential__c;
		         	producttext[i] = mylist[i].Product__c;
		         	circles[i].prod = mylist[i].Product__c;
		         }
		   //       var data = d3.range(40).map(function(i) {
		   //   return i % 5 ? {x: i / 39, y: (Math.sin(i / 3) + 2) / 4} : null;
		   // });

		   var margin = {top: 20, right: 20, bottom: 20, left: 20},
		       width = 600,
		       height = 460,
		       radius = 20,
		       diff = 140;

		  var x = d3.scaleLinear()
		      .range([0, width]);

		  var y = d3.scaleLinear()
		      .range([height, 0]);

		  // var line = d3.line()
		  //     .defined(function(d) { return d; })
		  //     .x(function(d) { return x(d.x); })
		  //     .y(function(d) { return y(d.y); });

		  var svg = d3.select("div#my-d3").append("svg")
		                      //.datum(data)
		                      .attr("width", width + margin.left + margin.right)
		                      .attr("height", height + margin.top + margin.bottom)
		                      .style("border", "0px solid black")
		                      .append("g")
		                      .attr("transform", "translate("+ margin.left + "," + margin.top + ")");


		/*  Formulas
		si 100000 = 100 %
		100000 /1000
		el otro viene en % 100% = 400
		100 * 4
		*/


		for (i = 0; i < circles.length; i++) {
			circles[i].x = radius*2;
		    circles[i].y = (i+.8) * 40;
		}
		var datay = ['Product', 'Probability', 'Potential'];
		 svg.selectAll().data(datay).enter().append("text")
		      .attr("x", function(d, i) {
		      return (i+1)*100;
		      })
		      .attr("y", function(d, i) {
		        return radius;
		      })
		      .attr("font-size", function (d, i) {
		          return fontsize;
		      })
		      .text(function(d) {
		        return d;
		      });

		svg.selectAll().data(circles).enter().append("rect")
		      .style("fill", "gainsboro")	
		      .attr("x", function(d) { return d.x - radius/2; })
		      .attr("width", function(d, i) { return i%2 ? 400: 0; })
		      .attr("y", function(d) { return d.y + radius; })
		      .attr("height", function(d){return 20*2});

		svg.selectAll().data(circles).enter().append("text")
		      .attr("x", function(d, i) {
		      return 70;
		      })
		      .attr("y", function(d, i) {
		        return  (i+1) * 40 +40
		      })
		      .attr("font-size", function (d, i) {
		          return fontsize;
		      })
		      .text(function(d) {
		        return d.prod;
		      });
		svg.selectAll().data(circles).enter().append("text")
		      .attr("x", function(d, i) {
		      return 230;
		      })
		      .attr("y", function(d, i) {
		        return  (i+1) * 40 +40
		      })
		      .attr("font-size", function (d, i) {
		          return fontsize;
		      })
		      .text(function(d) {
		        return d.xx+" %";
		      });
		svg.selectAll().data(circles).enter().append("text")
		      .attr("x", function(d, i) {
		      return 300;
		      })
		      .attr("y", function(d, i) {
		        return  (i+1) * 40 +40
		      })
		      .attr("font-size", function (d, i) {
		          return fontsize;
		      })
		      .text(function(d) {
		        return "$ "+d.yy;
		      });


			// svg.selectAll().append("text")
			// 	.data(circles)
			// 	  .enter().append("circle")
			// 	    .attr("cx", function(d) { return d.x; })
			// 	    .attr("cy", function(d) { return d.y; })
			// 		.attr("font-size", function (d, i) {return 20;})
		 //      		.text(function(d) {return product__c});
		    
		    //console.log(circles);
				var color = d3.scaleOrdinal()
				    .range(d3.schemeCategory20);

				svg.selectAll("circle")
				  .data(circles)
				  .enter().append("circle")
				    .attr("cx", function(d) { return d.x; })
				    .attr("cy", function(d) { return d.y + 40; })
				    .attr("r", radius/2)
				    .style("fill", function(d, i) { return color(i); });

		    } 
		    else if (event.type === 'exception') {
		        console.error(event.message, event.where);
			}});

		   </script>

	
		<div id="my-d3"/>

		<script src="https://d3js.org/d3.v4.min.js"></script>
		  <script>
	//
	//  Second Graph
	//
		  	var mylist = []; 
		  	// var circles = [{x: 0, y: 0},
		  	// {x: 0, y: 0},
		  	// {x: 0, y: 0},
		  	// {x: 0, y: 0},
		  	// {x: 0, y: 0},
		  	// {x: 0, y: 0},
		  	// {x: 0, y: 0},
		  	// {x: 0, y: 0},
		  	// {x: 0, y: 0},
		  	// {x: 0, y: 0}];

			potential_Manager.selectPot('', function(Potential__c, event) {
		    if (event.status) {
		        //console.log(Potential__c[0]);
		        mylist = event.result;
		        console.log(event);
		    	//circle[0].x = mylist[0].Probability__c ;
		    	//circle[0].y = mylist[0].Potential__c;
		    	//console.log(circle);
		    	for (i = 0; i < 10; i++) {
		         	circles[i].x = mylist[i].Probability__c ;
		         	circles[i].y = mylist[i].Potential__c;
		         }
		     //     var data = d3.range(40).map(function(i) {
		     // 	return i % 5 ? {x: i / 39, y: (Math.sin(i / 3) + 2) / 4} : null;
		   		// });


		   	var margin = {top: 20, right: 20, bottom: 20, left: 20},
		       width = 600,
		       height = 460,
		       radius = 20,
		       diff = 140;

		  	var x = d3.scaleLinear()
		      .range([0, width]);

		  	var y = d3.scaleLinear()
		      .range([height, 0]);

			  // var line = d3.line()
			  //     .defined(function(d) { return d; })
			  //     .x(function(d) { return x(d.x); })
			  //     .y(function(d) { return y(d.y); });

		  	var svg = d3.select("div#my-d3").append("svg")
		                      //.datum(data)
		                      .attr("width", width + margin.left + margin.right)
		                      .attr("height", height + margin.top + margin.bottom)
		                      .style("border", "0px solid black")
		                      .append("g")
		                      //.attr("transform", "translate("+ margin.left + "," + margin.top + ")");

		 var datax = ['High Potential', 'Potential ($)', 'Low Potential'];
		console.log(datax);

		 var datay = ['Low ','Probability (% Chance)','High '];
		 var datayy = ['Probability',' ','Probability'];

		  svg.selectAll().data(datax).enter().append("text")
		      .attr("x", function(d, i) {
		      return margin.left;
		      })
		      .attr("y", function(d, i) {
		        return  (i * ((height-radius)/2)) + radius
		      })
		      .attr("font-size", function (d, i) {
		          return fontsize;
		      })
		      .text(function(d) {
		        return d;
		      });

		  svg.selectAll().data(datay).enter().append("text")
		      .attr("x", function(d, i) {
		      return (width-diff)/2 * i + diff-(i<2? 0: radius);
		      })
		      .attr("y", function(d, i) {
		        return  height+radius-2;
		      })
		      .attr("font-size", function (d, i) {
		          return fontsize;
		      })
		      .attr("text-anchor", "middle")
		      .text(function(d) {
		        return d;
		      });
		      svg.selectAll().data(datayy).enter().append("text")
		      .attr("x", function(d, i) {
		      return (width-diff)/2 * i + diff-(i<2? 0: radius);
		      })
		      .attr("y", function(d, i) {
		        return  height+radius*2-4;
		      })
		      .attr("font-size", function (d, i) {
		          return fontsize;
		      })
		      .attr("text-anchor", "middle")
		      .text(function(d) {
		        return d;
		      });
		  svg.append("rect")
		        .attr("x", diff+radius)
		        .attr("y", 0)
		        .attr("width", width-diff)
		        .attr("height", height)
		        .attr("stroke", "black ")
		        .attr("stroke-width", 1)
		        .style("fill", 'white');

			// console.log(diff);
			// console.log(width-diff)
			// console.log(height)

		  // svg.append("g")
		  //     .attr("class", "x axis")
		  //     //.attr("transform", "translate(0," + x.range()[0] /2 + ")")
		  //     .attr("transform", "translate("+(diff+radius)+"," + height/2 +")")
		  //     .call(d3.axisBottom(x).tickValues([]));

		  // svg.append("g")
		  //     .attr("class", "y axis")
		  //     .attr("transform", "translate(" + (width+diff+radius+radius) /2 +")")
		  //     .call(d3.axisLeft(y).tickValues([]))
		  //     .style("stroke", "grey");

			//x
			svg.append("line")
			          .attr("x1", diff+radius)
			          .attr("y1", (height)/2)
			          .attr("x2", width+radius)
			          .attr("y2", (height)/2)
			          .style("stroke", "grey");

			//y
			svg.append("line")
			          .attr("x1", (width+diff)/2+radius)
			          .attr("y1", 0)
			          .attr("x2", (width+diff)/2+radius)
			          .attr("y2", height)
			          .style("stroke", "grey");


				//var width = +svg.attr("width"),
				//    height = +svg.attr("height");

				// var circles = d3.range(10).map(function() {
				//   return {
				//         x: Math.round(Math.random() * (width - radius * 2) + radius),
				//         y: Math.round(Math.random() * (height - radius * 2) + radius)
				//         };
				// });

		/*
		si 100000 = 100 %
		100,000 /1000
		el otro viene en % 100% = 460
		100 * 4.6
		*/

		      for (i = 0; i < circles.length; i++) {
		        circles[i].x = circles[i].xx * 4.4+diff+radius;
		        circles[i].y = height+radius - (circles[i].yy / 1000) * 4.6;
		        }

				var color = d3.scaleOrdinal()
				    .range(d3.schemeCategory20);

				svg.selectAll("circle")
				  .data(circles)
				  .enter().append("circle")
				    .attr("cx", function(d) { return d.x; })
				    .attr("cy", function(d) { return d.y; })
				    .attr("r", radius/2)
				    .style("fill", function(d, i) { return color(i); });

		    } 
		    else if (event.type === 'exception') {
		        console.error(event.message, event.where);
			}});

		   </script>

		</apex:pageblock>

 		<apex:pageblock title="Customer Evangelist">
		
		<style>
		  .active {
		    stroke: #000;
		    stroke-width: 2px;
		  }
		  body {
		    font: 10px sans-serif;
		    background-color: #FFFFF; 
		  }

		  .axis path,
		  .axis line {
		    fill: none;
		    stroke: #808080;
		    shape-rendering: crispEdges;
		  }
		/* .line {
		  fill: none;
		  stroke: steelblue;
		  stroke-width: 1.5px;
		} */

		</style>
		<div id="my-d4"/>

		<script src="https://d3js.org/d3.v4.min.js"></script>
		  <script>
	//
	//  Third Graph
	//
		  	var mylist = []; 
		  	var varAccounts = [{
		  		accountname: "AccountName1", 
		  		prod: 0}
		  		// ,
		  		//  {accountname: "AccountName2", 
		  		//  prod: 0},
		  		//  {accountname: "AccountName3", 
		  		//  prod: 0},
		  		//  {accountname: "AccountName4", 
		  		//  prod: 0}
		  		];
		  	//var producttext = [];
			//var products = [{}];

			potential_Manager.selectPurchased('', function(Account, event) {
		    if (event.status) {
		        //console.log(Account[0]);
		        mylist = event.result;	
		        //console.log(event);
		    	//circle[0].x = mylist[0].Probability__c ;
		    	//circle[0].y = mylist[0].Potential__c;
		    	cards = Object.keys(mylist).length;
		    	console.log(cards);
		    	//Object.keys(mylist).length; i++) {

		    	 for (ci = 0; ci<cards; ci++) {
		         	varAccounts[0].accountname = mylist[ci].Name;
		         	varAccounts[0].prod = mylist[ci].AccountPurchased__r;
		         	varAccounts[0].contact = mylist[ci].Contacts[0].FirstName + " "+mylist[ci].Contacts[0].LastName;
		         	varAccounts[0].sede = mylist[ci].BillingAddress.city;
		         	varAccounts[0].employees = mylist[ci].NumberOfEmployees;
		         	varAccounts[0].industry = mylist[ci].Industry;
		         	//producttext[i] = mylist[i].Product__c;
		         	// products[i].prod = mylist[i].Product__c;
		         
			      	//  var data = d3.range(40).map(function(i) {
			      	// 	return i % 5 ? {x: i / 39, y: (Math.sin(i / 3) + 2) / 4} : null;
			   		// });
			        //console.log("varAccounts: "+varAccounts[0]);

					 //var products = [{}];
					 var products = [{x:0, y:0},
					  {x:0, y:0},
					  {x:0, y:0},
					  {x:0, y:0},
					  {x:0, y:0},
					  {x:0, y:0}];
				   var margin = {top: 0, right: 20, bottom: 0, left: 20},
				       width = 280,
				       height = 400,
				       radius = 20,
				       diff = 200;

				  var x = d3.scaleLinear()
				      .range([0, width]);

				  var y = d3.scaleLinear()
				      .range([height, 0]);

					for (i = 0; i < Object.keys(varAccounts[0].prod).length; i++){
					 		products[i].x = 1 + i>3? 110: 0;
					 		products[i].y = 1 + i>3? 5-i: i; 
					 		products[i].prod = varAccounts[0].prod[i].Product__c;
					}
				//console.log("productos: " + products[0]);



			  // var line = d3.line()
			  //     .defined(function(d) { return d; })
			  //     .x(function(d) { return x(d.x); })
			  //     .y(function(d) { return y(d.y); });

		  	var svg = d3.select("div#my-d4").append("svg")
		                      //.datum(data)
		                      .attr("width", width + margin.left + margin.right)
		                      .attr("height", height + margin.top + margin.bottom)
		                      .style("border", "0px solid black")
		                      .append("g")
		                      .attr("transform", "translate("+ margin.left + "," + margin.top + ")");

				// for (i = 0; i < products.length; i++) {
				// 	products[i].x = radius*2;
				//     products[i].y = (i+.8) * 40;
				// }


			svg.selectAll().data(varAccounts).enter().append("text")
			      .attr("x", function(d, i) {return i * 320;
			      })
			      .attr("y", function(d, i) {return  30 
			      })
			      .attr("font-size", function (d, i) { return fontsize;
			      })
			      .text(function(d) {return d.accountname;
			      });
			svg.selectAll().data(varAccounts).enter().append("text")
			      .attr("x", function(d, i) {return 1;
			      })
			      .attr("y", function(d, i) {return  30+(i+1) * 40 
			      })
			      .attr("font-size", function (d, i) { return fontsize;
			      })
			      .text(function(d) {return "Owner: " + d.contact;
			      });

			svg.selectAll().data(products).enter().append("text")
			      .attr("x", function(d, i) {return d.x + radius;
			      })
			      .attr("y", function(d, i) {return 70 + (d.y + 1) * 40;
			      })
			      .attr("font-size", function (d, i) {return fontsize;
			      })
			      .text(function(d) {return d.prod;
			      });
			svg.append("line")
			          .attr("x1", 0)
			          .attr("y1", 200)
			          .attr("x2", 319)
			          .attr("y2", 200)
			          .style("stroke", "grey");

			svg.selectAll().data(varAccounts).enter().append("text")
			      .attr("x", function(d, i) {return 1;
			      })
			      .attr("y", function(d, i) {return 220;
			      })
			      .attr("font-size", function (d, i) {return fontsize;
			      })
			      .text(function(d) {return "Similarities";
			      });
			svg.selectAll().data(varAccounts).enter().append("text")
			      .attr("x", function(d, i) {return 1;
			      })
			      .attr("y", function(d, i) {return 240;
			      })
			      .attr("font-size", function (d, i) {return fontsize;
			      })
			      .text(function(d) {return d.sede;
			      });
			svg.selectAll().data(varAccounts).enter().append("text")
			      .attr("x", function(d, i) {return 1;
			      })
			      .attr("y", function(d, i) {return 260;
			      })
			      .attr("font-size", function (d, i) {return fontsize;
			      })
			      .text(function(d) {return d.employees+" Employees";
			      });

			var color = d3.scaleOrdinal()
					    .range(d3.schemeCategory20);

					svg.selectAll("circle")
					  .data(products)
					  .enter().append("circle")
					    .attr("cx", function(d) { return d.x + 2; })
					    .attr("cy", function(d) { return 70 + (d.y + 0.8) * 40; })
					    .attr("r", radius/2)
					    .style("fill", function(d, i) { return color(i); });
			
			     } }
		    else if (event.type === 'exception') {
		        console.error(event.message, event.where);
			}});

		   </script>
		 
		</apex:pageblock>
 
		</apex:outputpanel>
	</apex:form>
</apex:page>
